// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef HHVDOCTORSDK_SWIFT_H
#define HHVDOCTORSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import HHSDKVideo;
@import ImSDK;
@import ObjectiveC;
@import TXLiteAVSDK_TRTC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="hhVDoctorSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

/// HH 定位
SWIFT_CLASS("_TtC12hhVDoctorSDK10HHLocation")
@interface HHLocation : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) HHLocation * _Nonnull default_;)
+ (HHLocation * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// 启用定位
/// \param lng 经度
///
/// \param lat 纬度
///
- (void)startLocationWithLng:(NSString * _Nonnull)lng lat:(NSString * _Nonnull)lat;
/// 关闭定位
- (void)closeLocation;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HHMCallingState, open) {
  HHMCallingStateOnStart = 0,
  HHMCallingStateWaitingDoctor = 1,
  HHMCallingStateCallFreeDoctor = 2,
  HHMCallingStateCallConnect = 3,
  HHMCallingStateDidRing = 4,
};

@class NSNumber;
@class HHSDKOptions;
@protocol HHMVideoDelegate;

SWIFT_CLASS("_TtC12hhVDoctorSDK6HHMSDK")
@interface HHMSDK : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) HHMSDK * _Nonnull default_;)
+ (HHMSDK * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// 获取当前 SDK 版本号
@property (nonatomic, readonly, copy) NSString * _Nonnull SDKVersion;
/// 是否登录成功
@property (nonatomic, readonly) BOOL isLogined;
/// 添加支付宝支付调用接口
@property (nonatomic, copy) BOOL (^ _Nullable aliPayHook)(NSString * _Nonnull, NSString * _Nonnull, void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull));
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, copy) void (^ _Nullable photosPreview)(NSArray<NSString *> * _Nonnull);
/// 初始化 SDK
/// \param option 可选的 SDK 配置
///
- (void)startWithOption:(HHSDKOptions * _Nonnull)option;
/// 添加视频监听
/// \param delegate 代理
///
- (void)addWithDelegate:(id <HHMVideoDelegate> _Nonnull)delegate;
- (void)removeWithDelegate:(id <HHMVideoDelegate> _Nonnull)delegate;
/// 切换正式/测试环境，请勿调用
- (void)switchEnv:(BOOL)development;
/// 设置当前经纬度(用户购药)
- (void)setLocationWithLng:(NSString * _Nonnull)lng lat:(NSString * _Nonnull)lat;
@end


@interface HHMSDK (SWIFT_EXTENSION(hhVDoctorSDK))
/// 三方登录
/// \param userToken 三方信息
///
/// \param completion 完成的回调
///
- (void)loginForThirdId:(NSDictionary<NSString *, id> * _Nonnull)thirdInfo completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
@end

@class HHCallerInfo;

@interface HHMSDK (SWIFT_EXTENSION(hhVDoctorSDK))
/// 主动发起多人通话
/// \param type 呼叫类型
///
/// \param callee 被呼叫人的信息
///
- (void)startTeamCall:(enum HHCallType)type callee:(HHCallerInfo * _Nonnull)callee;
@end


@interface HHMSDK (SWIFT_EXTENSION(hhVDoctorSDK))
/// 指定人发起呼叫(带 UI)
/// <ul>
///   <li>
///     Parameters:
///   </li>
/// </ul>
- (void)startMemberCallWithNeedSelectMember:(BOOL)needSelectMember;
@end



@interface HHMSDK (SWIFT_EXTENSION(hhVDoctorSDK))
/// 获取病历详情
/// \param userToken 当前人的唯一标志
///
/// \param medicId 病历id
///
///
/// returns:
/// url
- (NSString * _Nonnull)getMedicDetailWithUserToken:(NSString * _Nonnull)userToken medicId:(NSString * _Nonnull)medicId SWIFT_WARN_UNUSED_RESULT;
/// 获取病历列表
/// \param userToken 当前人的唯一标志
///
///
/// returns:
/// url
- (NSString * _Nonnull)getMedicListWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
/// 获取所有病历列表
/// \param userToken 主账户的唯一标志
///
///
/// returns:
/// url
- (NSString * _Nonnull)getAllMedicsWithUserToken:(NSString * _Nonnull)userToken SWIFT_WARN_UNUSED_RESULT;
@end

@protocol HHCallDelegate;

@interface HHMSDK (SWIFT_EXTENSION(hhVDoctorSDK))
/// 主叫发起通话
/// \param type 呼叫类型
///
- (void)startCall:(enum HHCallType)type;
/// 指定人呼叫
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     uuid: 呼叫人Uuid
///   </li>
///   <li>
///     callDelegate: 呼叫状态回调
///   </li>
/// </ul>
- (void)startCall:(NSInteger)uuid type:(enum HHCallType)type callDelegate:(id <HHCallDelegate> _Nullable)callDelegate SWIFT_DEPRECATED_MSG("Use call(userToken : String) instead.");
/// 指定人呼叫
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userToken: 呼叫人userToken
///   </li>
/// </ul>
- (void)callWithUserToken:(NSString * _Nonnull)userToken;
/// 发起呼叫
/// \param uuid 呼叫人uuid
///
- (void)startNewCall:(NSInteger)uuid SWIFT_DEPRECATED_MSG("Use call(userToken : String) instead.");
@end

enum SkipType : NSInteger;
@class UIViewController;
@class UINavigationController;

@interface HHMSDK (SWIFT_EXTENSION(hhVDoctorSDK))
/// 跳转信息流首页
/// \param skipType 跳转类型 push 或 present
///
/// \param vc 当<code>skipType</code>为push时，需要传入UIViewController
///
- (void)skipChatHomeWithSkipType:(enum SkipType)skipType vc:(UIViewController * _Nullable)vc;
- (void)skipChatHome:(UINavigationController * _Nonnull)nav;
- (UIViewController * _Nullable)chatHomeVC SWIFT_WARN_UNUSED_RESULT;
/// 获取当前 token，未登录时为 nil
@property (nonatomic, readonly, copy) NSString * _Nullable userToken;
@end


@interface HHMSDK (SWIFT_EXTENSION(hhVDoctorSDK))
/// 登录账户
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userToken: 用户的唯一标志
///   </li>
///   <li>
///     completion: 完成的回调
///   </li>
/// </ul>
- (void)loginWithUserToken:(NSString * _Nonnull)userToken completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
/// 自动登录(如果已经保存了用户帐号和令牌,建议使用这个登录方式)
/// \param uuid 自动登录参数
///
- (void)autoLoginWithUuid:(NSInteger)uuid completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
/// 登出
/// \param callback 登出回调(字符串为空表示成功)
///
- (void)logoutWithComplete:(void (^ _Nullable)(NSString * _Nullable))complete;
/// App 即将杀死
- (void)terminate;
- (void)checkAutoLogin;
@end

@class UIView;

@interface HHMSDK (SWIFT_EXTENSION(hhVDoctorSDK)) <HHBaseVideoDelegate>
- (void)onStartWithOrderId:(NSString * _Nullable)orderId;
- (void)callStateChange:(enum HHBaseCallingState)state;
- (void)callDidEstablish;
- (void)getChatParentView:(UIView * _Nonnull)view;
- (void)callFailWithCode:(NSInteger)code error:(NSString * _Nonnull)error;
- (void)onFail:(NSInteger)errorCode errrorStr:(NSString * _Nullable)errrorStr;
- (void)onCancel;
- (void)receivedOrder:(NSString * _Nonnull)orderId;
- (void)callDidFinish;
- (void)onExtensionDoctor;
- (void)onReceive:(NSString * _Nonnull)callID;
- (void)onResponse:(BOOL)accept;
- (void)onForceOffline;
- (void)inviteFamily:(NSString * _Nonnull)page;
- (void)goPayCount:(NSString * _Nonnull)url;
- (void)onLeakPermission:(enum HHBasePermissionType)type;
@end


SWIFT_PROTOCOL("_TtP12hhVDoctorSDK16HHMVideoDelegate_")
@protocol HHMVideoDelegate
@optional
/// 主动视频时的呼叫状态变化
/// \param state 当前呼叫状态
///
- (void)callStateChange:(enum HHMCallingState)state;
/// \param orderId 当前订单ID
///
- (void)onStartWithOrderId:(NSString * _Nullable)orderId;
/// 通话已接通
- (void)callDidEstablish;
/// 视频页面回调
- (void)getChatParentView:(UIView * _Nonnull)view;
/// 呼叫失败（音视频服务报错）
/// \param error 错误信息
///
- (void)onFail:(NSInteger)errorCode errrorStr:(NSString * _Nullable)errrorStr;
- (void)onCancel;
/// 通话已结束 (接通之后才有结束)
- (void)callDidFinish;
/// 转呼医生
- (void)onExtensionDoctor;
/// 接收到呼叫(被呼叫方)
/// \param callID 呼叫的 id
///
- (void)onReceive:(NSString * _Nonnull)callID;
/// 收到视频呼入时的操作（被呼叫方）
/// \param accept 接受或者拒接
///
- (void)onResponse:(BOOL)accept;
/// 强制下线
- (void)onForceOffline;
/// 视频中邀请家人
- (void)inviteFamily:(NSString * _Nonnull)page;
/// 去支付次卡
- (void)goPayCount:(NSString * _Nonnull)url;
@end

@protocol HHVideoHUDable;
@class VideoOptions;
@class MessageOptions;
@class UsercenterOptions;
@protocol VideoOptionsProtocol;
@protocol MessageOptionsProtocol;
@protocol UsercenterOptionsProtocol;

SWIFT_CLASS("_TtC12hhVDoctorSDK12HHSDKOptions")
@interface HHSDKOptions : NSObject <OptionProtocal>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) HHSDKOptions * _Nonnull default_;)
+ (HHSDKOptions * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSTimeInterval hudDisTime;
/// 调试模式(打印日志)
@property (nonatomic) BOOL isDebug;
/// 是否开启测试服
@property (nonatomic) BOOL isDevelopment;
@property (nonatomic, strong) id <HHVideoHUDable> _Nonnull pHudManager;
/// 产品 id
@property (nonatomic, copy) NSString * _Nonnull productId;
/// 推送证书名
@property (nonatomic, copy) NSString * _Nullable cerName;
/// 日志打印模式
@property (nonatomic) enum HHLogMode logLevel;
/// 第三方传递 用于统计日志
@property (nonatomic, copy) NSString * _Nonnull mExtension;
/// 视频开始后180s显示换医生
@property (nonatomic) NSInteger changeDoctorTime;
/// 日志回调(仅测试有用)
@property (nonatomic, copy) void (^ _Nullable logCallback)(NSString * _Nonnull);
/// 音视频配置
@property (nonatomic, readonly, strong) VideoOptions * _Nonnull mVideoOptions;
/// 信息流配置
@property (nonatomic, readonly, strong) MessageOptions * _Nonnull mMessageOptions;
/// 个人中心配置
@property (nonatomic, readonly, strong) UsercenterOptions * _Nonnull mUserCenterOptions;
@property (nonatomic, strong) id <VideoOptionsProtocol> _Nonnull pVideoOptions;
@property (nonatomic, strong) id <MessageOptionsProtocol> _Nonnull pMessageOptions;
@property (nonatomic, strong) id <UsercenterOptionsProtocol> _Nonnull pUserCenterOptions;
@property (nonatomic, copy) NSString * _Nonnull sdkVersion;
@property (nonatomic, copy) NSString * _Nonnull appVersion;
@property (nonatomic) BOOL isTRTC;
@property (nonatomic) BOOL needDNS;
@property (nonatomic) BOOL shouldWaingCall;
@property (nonatomic) NSInteger changeDoctorInterval;
- (nonnull instancetype)initWithProductId:(NSString * _Nonnull)productId isDebug:(BOOL)isDebug isDevelop:(BOOL)isDevelop OBJC_DESIGNATED_INITIALIZER;
- (void)setUserExtensionWithUserExtension:(NSString * _Nonnull)userExtension;
- (void)setCallExtensionWithCallExtension:(NSString * _Nonnull)callExtension;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC12hhVDoctorSDK14MessageOptions")
@interface MessageOptions : NSObject <MessageOptionsProtocol>
/// 是否是Present显示
@property (nonatomic) BOOL isByPresent;
/// 信息流是否过滤医生总结
@property (nonatomic) BOOL isFilterSummary;
/// 信息流是否过滤药卡
@property (nonatomic) BOOL isFilterMedicinal;
/// 信息流默认头像
@property (nonatomic, copy) NSString * _Nonnull defaultDocHeader;
/// 信息流默认昵称
@property (nonatomic, copy) NSString * _Nonnull defaultDocName;
/// 信息流默认标题
@property (nonatomic, copy) NSString * _Nonnull messageTitle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, PermissionType, open) {
  PermissionTypeLocationAlways = 0,
  PermissionTypeLocationWhenInUse = 1,
  PermissionTypeMicrophone = 2,
  PermissionTypeCamera = 3,
  PermissionTypePhotos = 4,
};

typedef SWIFT_ENUM(NSInteger, SkipType, open) {
  SkipTypePush = 0,
  SkipTypePresent = 1,
};


SWIFT_CLASS("_TtC12hhVDoctorSDK3TIM")
@interface TIM : NSObject <HHIM>
- (void)register:(NSString * _Nullable)cerName;
- (void)login:(void (^ _Nullable)(NSString * _Nullable))completion;
- (void)autoLogin:(void (^ _Nullable)(NSString * _Nullable))completion;
- (void)logout:(void (^ _Nullable)(NSString * _Nullable))callback;
- (BOOL)canVideo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class V2TIMMessage;

@interface TIM (SWIFT_EXTENSION(hhVDoctorSDK)) <V2TIMAdvancedMsgListener>
- (void)onRecvNewMessage:(V2TIMMessage * _Null_unspecified)msg;
@end


@interface TIM (SWIFT_EXTENSION(hhVDoctorSDK)) <V2TIMSDKListener>
- (void)onConnectFailed:(int32_t)code err:(NSString * _Null_unspecified)err;
/// 当前用户被踢下线，此时可以 UI 提示用户，并再次调用 V2TIMManager 的 login() 函数重新登录。
- (void)onKickedOffline;
/// 在线时票据过期：此时您需要生成新的 userSig 并再次调用 V2TIMManager 的 login() 函数重新登录。
- (void)onUserSigExpired;
@end


SWIFT_CLASS("_TtC12hhVDoctorSDK4TRTC")
@interface TRTC : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

@interface TRTC (SWIFT_EXTENSION(hhVDoctorSDK))
- (void)onRecvCustomCmdMsgUserId:(NSString * _Nonnull)userId cmdID:(NSInteger)cmdID seq:(uint32_t)seq message:(NSData * _Nonnull)message;
- (void)onMissCustomCmdMsgUserId:(NSString * _Nonnull)userId cmdID:(NSInteger)cmdID errCode:(NSInteger)errCode missed:(NSInteger)missed;
@end

@class TRTCVolumeInfo;
@class TRTCQualityInfo;

@interface TRTC (SWIFT_EXTENSION(hhVDoctorSDK)) <TRTCCloudDelegate>
- (void)onEnterRoom:(NSInteger)result;
- (void)onExitRoom:(NSInteger)reason;
- (void)onRemoteUserEnterRoom:(NSString * _Nonnull)userId;
- (void)onRemoteUserLeaveRoom:(NSString * _Nonnull)userId reason:(NSInteger)reason;
- (void)onUserVideoAvailable:(NSString * _Nonnull)userId available:(BOOL)available;
- (void)onUserVoiceVolume:(NSArray<TRTCVolumeInfo *> * _Nonnull)userVolumes totalVolume:(NSInteger)totalVolume;
- (void)onFirstVideoFrame:(NSString * _Nonnull)userId streamType:(TRTCVideoStreamType)streamType width:(int32_t)width height:(int32_t)height;
- (void)onUserAudioAvailable:(NSString * _Nonnull)userId available:(BOOL)available;
- (void)onNetworkQuality:(TRTCQualityInfo * _Nonnull)localQuality remoteQuality:(NSArray<TRTCQualityInfo *> * _Nonnull)remoteQuality;
- (void)onError:(TXLiteAVError)errCode errMsg:(NSString * _Nullable)errMsg extInfo:(NSDictionary * _Nullable)extInfo;
@end

@class UIImage;

@interface TRTC (SWIFT_EXTENSION(hhVDoctorSDK)) <HHRTC>
- (void)startCallWithCallee:(NSString * _Nonnull)callee orderId:(NSString * _Nullable)orderId;
- (void)setRoomIdWithRoomId:(NSString * _Nonnull)roomId;
- (void)setOrderIdWithOrderId:(NSString * _Nonnull)orderId;
- (void)enterRoomWithOrderId:(NSString * _Nonnull)orderId roomId:(NSString * _Nonnull)roomId;
- (void)openDoctorViewWithUserId:(NSString * _Nonnull)userId view:(UIView * _Nonnull)view;
- (void)closeDoctorViewWithUserId:(NSString * _Nonnull)userId;
- (void)switchCamera:(BOOL)isFront;
- (void)switchCameraFlash:(BOOL)isOpen;
- (void)switchLocalAudio:(BOOL)isOpen;
- (void)switchLocalVideo:(BOOL)isOpen localView:(UIView * _Nonnull)localView;
- (void)sendMsgWithIsSignal:(BOOL)isSignal cmd:(NSString * _Nonnull)cmd to:(NSString * _Nonnull)to complete:(void (^ _Nullable)(NSString * _Nullable))complete;
- (void)leaveRoom;
- (void)startRingWithAudioId:(NSInteger)audioId;
- (void)stopRing;
- (void)snapshotVideoWithUserId:(NSString * _Nullable)userId imageBack:(void (^ _Nonnull)(UIImage * _Nonnull))imageBack;
@end


SWIFT_CLASS("_TtC12hhVDoctorSDK17UsercenterOptions")
@interface UsercenterOptions : NSObject <UsercenterOptionsProtocol>
/// 是否隐藏会员信息
@property (nonatomic) BOOL enableVipInfo;
/// 是否隐藏个人中心入口
@property (nonatomic) BOOL hideUserCenter;
/// 是否展示激活码入口
@property (nonatomic) BOOL enableActivate;
/// 是否展示档案库入口
@property (nonatomic) BOOL enableMedical;
/// 档案库是否可以增加成员
@property (nonatomic) BOOL enableAddMemberInDoc;
/// 是否显示购买VIP入口
@property (nonatomic) BOOL enableBuyService;
/// 是否允许弹出实名认证
@property (nonatomic) BOOL enablePopRealName;
/// 是否隐藏权益列表
@property (nonatomic) BOOL isCloseMoreFunc;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12hhVDoctorSDK12VideoOptions")
@interface VideoOptions : NSObject <VideoOptionsProtocol>
/// 呼叫时是否需要过滤生日性别 <解放行不需要加>
@property (nonatomic) BOOL filterCallerInfo;
/// 是否开启美颜
@property (nonatomic) BOOL allowBeauty;
/// 允许视频完成后评价
@property (nonatomic) BOOL allowEvaluate;
/// 选人页面是否显示增加成员入口
@property (nonatomic) BOOL allowAddMember;
/// 选人页面是否可以选择多人视频
@property (nonatomic) BOOL allowMulti;
/// 呼叫扩展参数
@property (nonatomic, copy) NSString * _Nonnull mCallExtension;
/// 是否显示医生信息
@property (nonatomic) BOOL isShowDocInfo;
/// 可以关闭摄像头
@property (nonatomic) BOOL enableCloseCamera;
/// 不可关闭摄像头
@property (nonatomic) BOOL isCloseCameraCall;
/// 关闭视频中实名
@property (nonatomic) BOOL isCloseRealNameInVideo;
/// 显示视频中邀请家人
@property (nonatomic) BOOL showInviteInVideo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
